
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b5c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000d20  08000d28  00010d28  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000d20  08000d20  00010d28  2**0
                  CONTENTS
  4 .ARM          00000000  08000d20  08000d20  00010d28  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000d20  08000d28  00010d28  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000d20  08000d20  00010d20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000d24  08000d24  00010d24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010d28  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000d28  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000d28  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010d28  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001e07  00000000  00000000  00010d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000584  00000000  00000000  00012b5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000198  00000000  00000000  000130e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000160  00000000  00000000  00013280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000027ae  00000000  00000000  000133e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001950  00000000  00000000  00015b8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000b09e  00000000  00000000  000174de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0002257c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000005f4  00000000  00000000  000225d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000d08 	.word	0x08000d08

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	08000d08 	.word	0x08000d08

08000204 <GPIO_PeriphClkControl>:

#include <stm32f446xx_gpio.h>
#include <sys/_stdint.h>


void GPIO_PeriphClkControl(GPIO_RegDef_t *pGPIOx, uint8_t EnOrDi) {
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
 800020c:	460b      	mov	r3, r1
 800020e:	70fb      	strb	r3, [r7, #3]

	if(pGPIOx == GPIOA) {
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	4a56      	ldr	r2, [pc, #344]	; (800036c <GPIO_PeriphClkControl+0x168>)
 8000214:	4293      	cmp	r3, r2
 8000216:	d110      	bne.n	800023a <GPIO_PeriphClkControl+0x36>

		if(EnOrDi) GPIOA_CLK_EN();
 8000218:	78fb      	ldrb	r3, [r7, #3]
 800021a:	2b00      	cmp	r3, #0
 800021c:	d006      	beq.n	800022c <GPIO_PeriphClkControl+0x28>
 800021e:	4b54      	ldr	r3, [pc, #336]	; (8000370 <GPIO_PeriphClkControl+0x16c>)
 8000220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000222:	4a53      	ldr	r2, [pc, #332]	; (8000370 <GPIO_PeriphClkControl+0x16c>)
 8000224:	f043 0301 	orr.w	r3, r3, #1
 8000228:	6313      	str	r3, [r2, #48]	; 0x30
		if(EnOrDi) GPIOH_CLK_EN();
		else GPIOH_CLK_DI();

	}

}
 800022a:	e098      	b.n	800035e <GPIO_PeriphClkControl+0x15a>
		else GPIOA_CLK_DI();
 800022c:	4b50      	ldr	r3, [pc, #320]	; (8000370 <GPIO_PeriphClkControl+0x16c>)
 800022e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000230:	4a4f      	ldr	r2, [pc, #316]	; (8000370 <GPIO_PeriphClkControl+0x16c>)
 8000232:	f043 0301 	orr.w	r3, r3, #1
 8000236:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000238:	e091      	b.n	800035e <GPIO_PeriphClkControl+0x15a>
	else if(pGPIOx == GPIOB) {
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	4a4d      	ldr	r2, [pc, #308]	; (8000374 <GPIO_PeriphClkControl+0x170>)
 800023e:	4293      	cmp	r3, r2
 8000240:	d110      	bne.n	8000264 <GPIO_PeriphClkControl+0x60>
		if(EnOrDi) GPIOB_CLK_EN();
 8000242:	78fb      	ldrb	r3, [r7, #3]
 8000244:	2b00      	cmp	r3, #0
 8000246:	d006      	beq.n	8000256 <GPIO_PeriphClkControl+0x52>
 8000248:	4b49      	ldr	r3, [pc, #292]	; (8000370 <GPIO_PeriphClkControl+0x16c>)
 800024a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800024c:	4a48      	ldr	r2, [pc, #288]	; (8000370 <GPIO_PeriphClkControl+0x16c>)
 800024e:	f043 0302 	orr.w	r3, r3, #2
 8000252:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000254:	e083      	b.n	800035e <GPIO_PeriphClkControl+0x15a>
		else GPIOB_CLK_DI();
 8000256:	4b46      	ldr	r3, [pc, #280]	; (8000370 <GPIO_PeriphClkControl+0x16c>)
 8000258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800025a:	4a45      	ldr	r2, [pc, #276]	; (8000370 <GPIO_PeriphClkControl+0x16c>)
 800025c:	f023 0302 	bic.w	r3, r3, #2
 8000260:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000262:	e07c      	b.n	800035e <GPIO_PeriphClkControl+0x15a>
	else if(pGPIOx == GPIOC) {
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	4a44      	ldr	r2, [pc, #272]	; (8000378 <GPIO_PeriphClkControl+0x174>)
 8000268:	4293      	cmp	r3, r2
 800026a:	d110      	bne.n	800028e <GPIO_PeriphClkControl+0x8a>
		if(EnOrDi) GPIOC_CLK_EN();
 800026c:	78fb      	ldrb	r3, [r7, #3]
 800026e:	2b00      	cmp	r3, #0
 8000270:	d006      	beq.n	8000280 <GPIO_PeriphClkControl+0x7c>
 8000272:	4b3f      	ldr	r3, [pc, #252]	; (8000370 <GPIO_PeriphClkControl+0x16c>)
 8000274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000276:	4a3e      	ldr	r2, [pc, #248]	; (8000370 <GPIO_PeriphClkControl+0x16c>)
 8000278:	f043 0304 	orr.w	r3, r3, #4
 800027c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800027e:	e06e      	b.n	800035e <GPIO_PeriphClkControl+0x15a>
		else GPIOC_CLK_DI();
 8000280:	4b3b      	ldr	r3, [pc, #236]	; (8000370 <GPIO_PeriphClkControl+0x16c>)
 8000282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000284:	4a3a      	ldr	r2, [pc, #232]	; (8000370 <GPIO_PeriphClkControl+0x16c>)
 8000286:	f023 0304 	bic.w	r3, r3, #4
 800028a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800028c:	e067      	b.n	800035e <GPIO_PeriphClkControl+0x15a>
	else if(pGPIOx == GPIOD) {
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	4a3a      	ldr	r2, [pc, #232]	; (800037c <GPIO_PeriphClkControl+0x178>)
 8000292:	4293      	cmp	r3, r2
 8000294:	d110      	bne.n	80002b8 <GPIO_PeriphClkControl+0xb4>
		if(EnOrDi) GPIOD_CLK_EN();
 8000296:	78fb      	ldrb	r3, [r7, #3]
 8000298:	2b00      	cmp	r3, #0
 800029a:	d006      	beq.n	80002aa <GPIO_PeriphClkControl+0xa6>
 800029c:	4b34      	ldr	r3, [pc, #208]	; (8000370 <GPIO_PeriphClkControl+0x16c>)
 800029e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002a0:	4a33      	ldr	r2, [pc, #204]	; (8000370 <GPIO_PeriphClkControl+0x16c>)
 80002a2:	f043 0308 	orr.w	r3, r3, #8
 80002a6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002a8:	e059      	b.n	800035e <GPIO_PeriphClkControl+0x15a>
		else GPIOD_CLK_DI();
 80002aa:	4b31      	ldr	r3, [pc, #196]	; (8000370 <GPIO_PeriphClkControl+0x16c>)
 80002ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002ae:	4a30      	ldr	r2, [pc, #192]	; (8000370 <GPIO_PeriphClkControl+0x16c>)
 80002b0:	f023 0308 	bic.w	r3, r3, #8
 80002b4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002b6:	e052      	b.n	800035e <GPIO_PeriphClkControl+0x15a>
	else if(pGPIOx == GPIOE) {
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	4a31      	ldr	r2, [pc, #196]	; (8000380 <GPIO_PeriphClkControl+0x17c>)
 80002bc:	4293      	cmp	r3, r2
 80002be:	d110      	bne.n	80002e2 <GPIO_PeriphClkControl+0xde>
		if(EnOrDi) GPIOE_CLK_EN();
 80002c0:	78fb      	ldrb	r3, [r7, #3]
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d006      	beq.n	80002d4 <GPIO_PeriphClkControl+0xd0>
 80002c6:	4b2a      	ldr	r3, [pc, #168]	; (8000370 <GPIO_PeriphClkControl+0x16c>)
 80002c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002ca:	4a29      	ldr	r2, [pc, #164]	; (8000370 <GPIO_PeriphClkControl+0x16c>)
 80002cc:	f043 0310 	orr.w	r3, r3, #16
 80002d0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002d2:	e044      	b.n	800035e <GPIO_PeriphClkControl+0x15a>
		else GPIOE_CLK_DI();
 80002d4:	4b26      	ldr	r3, [pc, #152]	; (8000370 <GPIO_PeriphClkControl+0x16c>)
 80002d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002d8:	4a25      	ldr	r2, [pc, #148]	; (8000370 <GPIO_PeriphClkControl+0x16c>)
 80002da:	f023 0310 	bic.w	r3, r3, #16
 80002de:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002e0:	e03d      	b.n	800035e <GPIO_PeriphClkControl+0x15a>
	else if(pGPIOx == GPIOF) {
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	4a27      	ldr	r2, [pc, #156]	; (8000384 <GPIO_PeriphClkControl+0x180>)
 80002e6:	4293      	cmp	r3, r2
 80002e8:	d110      	bne.n	800030c <GPIO_PeriphClkControl+0x108>
		if(EnOrDi) GPIOF_CLK_EN();
 80002ea:	78fb      	ldrb	r3, [r7, #3]
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d006      	beq.n	80002fe <GPIO_PeriphClkControl+0xfa>
 80002f0:	4b1f      	ldr	r3, [pc, #124]	; (8000370 <GPIO_PeriphClkControl+0x16c>)
 80002f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002f4:	4a1e      	ldr	r2, [pc, #120]	; (8000370 <GPIO_PeriphClkControl+0x16c>)
 80002f6:	f043 0320 	orr.w	r3, r3, #32
 80002fa:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002fc:	e02f      	b.n	800035e <GPIO_PeriphClkControl+0x15a>
		else GPIOF_CLK_DI();
 80002fe:	4b1c      	ldr	r3, [pc, #112]	; (8000370 <GPIO_PeriphClkControl+0x16c>)
 8000300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000302:	4a1b      	ldr	r2, [pc, #108]	; (8000370 <GPIO_PeriphClkControl+0x16c>)
 8000304:	f023 0320 	bic.w	r3, r3, #32
 8000308:	6313      	str	r3, [r2, #48]	; 0x30
}
 800030a:	e028      	b.n	800035e <GPIO_PeriphClkControl+0x15a>
	else if(pGPIOx == GPIOG) {
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	4a1e      	ldr	r2, [pc, #120]	; (8000388 <GPIO_PeriphClkControl+0x184>)
 8000310:	4293      	cmp	r3, r2
 8000312:	d110      	bne.n	8000336 <GPIO_PeriphClkControl+0x132>
		if(EnOrDi) GPIOG_CLK_EN();
 8000314:	78fb      	ldrb	r3, [r7, #3]
 8000316:	2b00      	cmp	r3, #0
 8000318:	d006      	beq.n	8000328 <GPIO_PeriphClkControl+0x124>
 800031a:	4b15      	ldr	r3, [pc, #84]	; (8000370 <GPIO_PeriphClkControl+0x16c>)
 800031c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800031e:	4a14      	ldr	r2, [pc, #80]	; (8000370 <GPIO_PeriphClkControl+0x16c>)
 8000320:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000324:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000326:	e01a      	b.n	800035e <GPIO_PeriphClkControl+0x15a>
		else GPIOG_CLK_DI();
 8000328:	4b11      	ldr	r3, [pc, #68]	; (8000370 <GPIO_PeriphClkControl+0x16c>)
 800032a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800032c:	4a10      	ldr	r2, [pc, #64]	; (8000370 <GPIO_PeriphClkControl+0x16c>)
 800032e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000332:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000334:	e013      	b.n	800035e <GPIO_PeriphClkControl+0x15a>
	else if(pGPIOx == GPIOH) {
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	4a14      	ldr	r2, [pc, #80]	; (800038c <GPIO_PeriphClkControl+0x188>)
 800033a:	4293      	cmp	r3, r2
 800033c:	d10f      	bne.n	800035e <GPIO_PeriphClkControl+0x15a>
		if(EnOrDi) GPIOH_CLK_EN();
 800033e:	78fb      	ldrb	r3, [r7, #3]
 8000340:	2b00      	cmp	r3, #0
 8000342:	d006      	beq.n	8000352 <GPIO_PeriphClkControl+0x14e>
 8000344:	4b0a      	ldr	r3, [pc, #40]	; (8000370 <GPIO_PeriphClkControl+0x16c>)
 8000346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000348:	4a09      	ldr	r2, [pc, #36]	; (8000370 <GPIO_PeriphClkControl+0x16c>)
 800034a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800034e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000350:	e005      	b.n	800035e <GPIO_PeriphClkControl+0x15a>
		else GPIOH_CLK_DI();
 8000352:	4b07      	ldr	r3, [pc, #28]	; (8000370 <GPIO_PeriphClkControl+0x16c>)
 8000354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000356:	4a06      	ldr	r2, [pc, #24]	; (8000370 <GPIO_PeriphClkControl+0x16c>)
 8000358:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800035c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800035e:	bf00      	nop
 8000360:	370c      	adds	r7, #12
 8000362:	46bd      	mov	sp, r7
 8000364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000368:	4770      	bx	lr
 800036a:	bf00      	nop
 800036c:	40020000 	.word	0x40020000
 8000370:	40023800 	.word	0x40023800
 8000374:	40020400 	.word	0x40020400
 8000378:	40020800 	.word	0x40020800
 800037c:	40020c00 	.word	0x40020c00
 8000380:	40021000 	.word	0x40021000
 8000384:	40021400 	.word	0x40021400
 8000388:	40021800 	.word	0x40021800
 800038c:	40021c00 	.word	0x40021c00

08000390 <GPIO_Init>:


void GPIO_Init(GPIO_Handle_t *pGPIOHandle) {
 8000390:	b580      	push	{r7, lr}
 8000392:	b086      	sub	sp, #24
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]

	/* 0 enable the peripheral clock */
	GPIO_PeriphClkControl(pGPIOHandle->pGPIOx, ENABLE);
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	2101      	movs	r1, #1
 800039e:	4618      	mov	r0, r3
 80003a0:	f7ff ff30 	bl	8000204 <GPIO_PeriphClkControl>

	/* 1 mode */
	uint32_t temp = 0;
 80003a4:	2300      	movs	r3, #0
 80003a6:	617b      	str	r3, [r7, #20]
	if(pGPIOHandle->Config.Mode <= GPIO_MODE_ANALOG) {
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	795b      	ldrb	r3, [r3, #5]
 80003ac:	2b03      	cmp	r3, #3
 80003ae:	d81f      	bhi.n	80003f0 <GPIO_Init+0x60>

		temp = (pGPIOHandle->Config.Mode << (2 * pGPIOHandle->Config.PinNumber));
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	795b      	ldrb	r3, [r3, #5]
 80003b4:	461a      	mov	r2, r3
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	791b      	ldrb	r3, [r3, #4]
 80003ba:	005b      	lsls	r3, r3, #1
 80003bc:	fa02 f303 	lsl.w	r3, r2, r3
 80003c0:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0b11 << pGPIOHandle->Config.PinNumber);
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	681a      	ldr	r2, [r3, #0]
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	791b      	ldrb	r3, [r3, #4]
 80003cc:	4619      	mov	r1, r3
 80003ce:	2303      	movs	r3, #3
 80003d0:	408b      	lsls	r3, r1
 80003d2:	43db      	mvns	r3, r3
 80003d4:	4619      	mov	r1, r3
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	400a      	ands	r2, r1
 80003dc:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	6819      	ldr	r1, [r3, #0]
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	697a      	ldr	r2, [r7, #20]
 80003ea:	430a      	orrs	r2, r1
 80003ec:	601a      	str	r2, [r3, #0]
 80003ee:	e0b4      	b.n	800055a <GPIO_Init+0x1ca>

	}
	else {

		if(pGPIOHandle->Config.Mode  == GPIO_MODE_IT_FT) {
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	795b      	ldrb	r3, [r3, #5]
 80003f4:	2b04      	cmp	r3, #4
 80003f6:	d117      	bne.n	8000428 <GPIO_Init+0x98>

			/* clear rt register to be explicit */
			EXTI->RTSR &= ~(1 << pGPIOHandle->Config.PinNumber);
 80003f8:	4ba1      	ldr	r3, [pc, #644]	; (8000680 <GPIO_Init+0x2f0>)
 80003fa:	689b      	ldr	r3, [r3, #8]
 80003fc:	687a      	ldr	r2, [r7, #4]
 80003fe:	7912      	ldrb	r2, [r2, #4]
 8000400:	4611      	mov	r1, r2
 8000402:	2201      	movs	r2, #1
 8000404:	408a      	lsls	r2, r1
 8000406:	43d2      	mvns	r2, r2
 8000408:	4611      	mov	r1, r2
 800040a:	4a9d      	ldr	r2, [pc, #628]	; (8000680 <GPIO_Init+0x2f0>)
 800040c:	400b      	ands	r3, r1
 800040e:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (1 << pGPIOHandle->Config.PinNumber);
 8000410:	4b9b      	ldr	r3, [pc, #620]	; (8000680 <GPIO_Init+0x2f0>)
 8000412:	68db      	ldr	r3, [r3, #12]
 8000414:	687a      	ldr	r2, [r7, #4]
 8000416:	7912      	ldrb	r2, [r2, #4]
 8000418:	4611      	mov	r1, r2
 800041a:	2201      	movs	r2, #1
 800041c:	408a      	lsls	r2, r1
 800041e:	4611      	mov	r1, r2
 8000420:	4a97      	ldr	r2, [pc, #604]	; (8000680 <GPIO_Init+0x2f0>)
 8000422:	430b      	orrs	r3, r1
 8000424:	60d3      	str	r3, [r2, #12]
 8000426:	e035      	b.n	8000494 <GPIO_Init+0x104>

		}

		else if(pGPIOHandle->Config.Mode == GPIO_MODE_IT_RT) {
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	795b      	ldrb	r3, [r3, #5]
 800042c:	2b05      	cmp	r3, #5
 800042e:	d117      	bne.n	8000460 <GPIO_Init+0xd0>

			/* clear ft register to be explicit */
			EXTI->FTSR &= ~(1 << pGPIOHandle->Config.PinNumber);
 8000430:	4b93      	ldr	r3, [pc, #588]	; (8000680 <GPIO_Init+0x2f0>)
 8000432:	68db      	ldr	r3, [r3, #12]
 8000434:	687a      	ldr	r2, [r7, #4]
 8000436:	7912      	ldrb	r2, [r2, #4]
 8000438:	4611      	mov	r1, r2
 800043a:	2201      	movs	r2, #1
 800043c:	408a      	lsls	r2, r1
 800043e:	43d2      	mvns	r2, r2
 8000440:	4611      	mov	r1, r2
 8000442:	4a8f      	ldr	r2, [pc, #572]	; (8000680 <GPIO_Init+0x2f0>)
 8000444:	400b      	ands	r3, r1
 8000446:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->Config.PinNumber);
 8000448:	4b8d      	ldr	r3, [pc, #564]	; (8000680 <GPIO_Init+0x2f0>)
 800044a:	689b      	ldr	r3, [r3, #8]
 800044c:	687a      	ldr	r2, [r7, #4]
 800044e:	7912      	ldrb	r2, [r2, #4]
 8000450:	4611      	mov	r1, r2
 8000452:	2201      	movs	r2, #1
 8000454:	408a      	lsls	r2, r1
 8000456:	4611      	mov	r1, r2
 8000458:	4a89      	ldr	r2, [pc, #548]	; (8000680 <GPIO_Init+0x2f0>)
 800045a:	430b      	orrs	r3, r1
 800045c:	6093      	str	r3, [r2, #8]
 800045e:	e019      	b.n	8000494 <GPIO_Init+0x104>

		}

		else if(pGPIOHandle->Config.Mode == GPIO_MODE_IT_RFT) {
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	795b      	ldrb	r3, [r3, #5]
 8000464:	2b06      	cmp	r3, #6
 8000466:	d115      	bne.n	8000494 <GPIO_Init+0x104>

			EXTI->FTSR |= (1 << pGPIOHandle->Config.PinNumber);
 8000468:	4b85      	ldr	r3, [pc, #532]	; (8000680 <GPIO_Init+0x2f0>)
 800046a:	68db      	ldr	r3, [r3, #12]
 800046c:	687a      	ldr	r2, [r7, #4]
 800046e:	7912      	ldrb	r2, [r2, #4]
 8000470:	4611      	mov	r1, r2
 8000472:	2201      	movs	r2, #1
 8000474:	408a      	lsls	r2, r1
 8000476:	4611      	mov	r1, r2
 8000478:	4a81      	ldr	r2, [pc, #516]	; (8000680 <GPIO_Init+0x2f0>)
 800047a:	430b      	orrs	r3, r1
 800047c:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->Config.PinNumber);
 800047e:	4b80      	ldr	r3, [pc, #512]	; (8000680 <GPIO_Init+0x2f0>)
 8000480:	689b      	ldr	r3, [r3, #8]
 8000482:	687a      	ldr	r2, [r7, #4]
 8000484:	7912      	ldrb	r2, [r2, #4]
 8000486:	4611      	mov	r1, r2
 8000488:	2201      	movs	r2, #1
 800048a:	408a      	lsls	r2, r1
 800048c:	4611      	mov	r1, r2
 800048e:	4a7c      	ldr	r2, [pc, #496]	; (8000680 <GPIO_Init+0x2f0>)
 8000490:	430b      	orrs	r3, r1
 8000492:	6093      	str	r3, [r2, #8]

		}

		/* configure GPIO port config in SYSCFG_EXTICR */
		uint8_t registerSelect = pGPIOHandle->Config.PinNumber / 4;
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	791b      	ldrb	r3, [r3, #4]
 8000498:	089b      	lsrs	r3, r3, #2
 800049a:	74fb      	strb	r3, [r7, #19]
		uint8_t bitFieldShift =  pGPIOHandle->Config.PinNumber % 4;
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	791b      	ldrb	r3, [r3, #4]
 80004a0:	f003 0303 	and.w	r3, r3, #3
 80004a4:	74bb      	strb	r3, [r7, #18]
		uint8_t portCode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	4a76      	ldr	r2, [pc, #472]	; (8000684 <GPIO_Init+0x2f4>)
 80004ac:	4293      	cmp	r3, r2
 80004ae:	d032      	beq.n	8000516 <GPIO_Init+0x186>
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	4a74      	ldr	r2, [pc, #464]	; (8000688 <GPIO_Init+0x2f8>)
 80004b6:	4293      	cmp	r3, r2
 80004b8:	d02b      	beq.n	8000512 <GPIO_Init+0x182>
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	4a73      	ldr	r2, [pc, #460]	; (800068c <GPIO_Init+0x2fc>)
 80004c0:	4293      	cmp	r3, r2
 80004c2:	d024      	beq.n	800050e <GPIO_Init+0x17e>
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	4a71      	ldr	r2, [pc, #452]	; (8000690 <GPIO_Init+0x300>)
 80004ca:	4293      	cmp	r3, r2
 80004cc:	d01d      	beq.n	800050a <GPIO_Init+0x17a>
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	4a70      	ldr	r2, [pc, #448]	; (8000694 <GPIO_Init+0x304>)
 80004d4:	4293      	cmp	r3, r2
 80004d6:	d016      	beq.n	8000506 <GPIO_Init+0x176>
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4a6e      	ldr	r2, [pc, #440]	; (8000698 <GPIO_Init+0x308>)
 80004de:	4293      	cmp	r3, r2
 80004e0:	d00f      	beq.n	8000502 <GPIO_Init+0x172>
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	4a6d      	ldr	r2, [pc, #436]	; (800069c <GPIO_Init+0x30c>)
 80004e8:	4293      	cmp	r3, r2
 80004ea:	d008      	beq.n	80004fe <GPIO_Init+0x16e>
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4a6b      	ldr	r2, [pc, #428]	; (80006a0 <GPIO_Init+0x310>)
 80004f2:	4293      	cmp	r3, r2
 80004f4:	d101      	bne.n	80004fa <GPIO_Init+0x16a>
 80004f6:	2307      	movs	r3, #7
 80004f8:	e00e      	b.n	8000518 <GPIO_Init+0x188>
 80004fa:	2300      	movs	r3, #0
 80004fc:	e00c      	b.n	8000518 <GPIO_Init+0x188>
 80004fe:	2306      	movs	r3, #6
 8000500:	e00a      	b.n	8000518 <GPIO_Init+0x188>
 8000502:	2305      	movs	r3, #5
 8000504:	e008      	b.n	8000518 <GPIO_Init+0x188>
 8000506:	2304      	movs	r3, #4
 8000508:	e006      	b.n	8000518 <GPIO_Init+0x188>
 800050a:	2303      	movs	r3, #3
 800050c:	e004      	b.n	8000518 <GPIO_Init+0x188>
 800050e:	2302      	movs	r3, #2
 8000510:	e002      	b.n	8000518 <GPIO_Init+0x188>
 8000512:	2301      	movs	r3, #1
 8000514:	e000      	b.n	8000518 <GPIO_Init+0x188>
 8000516:	2300      	movs	r3, #0
 8000518:	747b      	strb	r3, [r7, #17]
		const uint8_t portCodeLen = 4;
 800051a:	2304      	movs	r3, #4
 800051c:	743b      	strb	r3, [r7, #16]
		SYSCFG->EXTICR[registerSelect] |= (portCode << portCodeLen * bitFieldShift);
 800051e:	4a61      	ldr	r2, [pc, #388]	; (80006a4 <GPIO_Init+0x314>)
 8000520:	7cfb      	ldrb	r3, [r7, #19]
 8000522:	3302      	adds	r3, #2
 8000524:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000528:	7c79      	ldrb	r1, [r7, #17]
 800052a:	7c3b      	ldrb	r3, [r7, #16]
 800052c:	7cb8      	ldrb	r0, [r7, #18]
 800052e:	fb00 f303 	mul.w	r3, r0, r3
 8000532:	fa01 f303 	lsl.w	r3, r1, r3
 8000536:	4618      	mov	r0, r3
 8000538:	495a      	ldr	r1, [pc, #360]	; (80006a4 <GPIO_Init+0x314>)
 800053a:	7cfb      	ldrb	r3, [r7, #19]
 800053c:	4302      	orrs	r2, r0
 800053e:	3302      	adds	r3, #2
 8000540:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		/* enable EXTI interrupt delivery using IMR */
		EXTI->IMR |= (1 << pGPIOHandle->Config.PinNumber);
 8000544:	4b4e      	ldr	r3, [pc, #312]	; (8000680 <GPIO_Init+0x2f0>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	687a      	ldr	r2, [r7, #4]
 800054a:	7912      	ldrb	r2, [r2, #4]
 800054c:	4611      	mov	r1, r2
 800054e:	2201      	movs	r2, #1
 8000550:	408a      	lsls	r2, r1
 8000552:	4611      	mov	r1, r2
 8000554:	4a4a      	ldr	r2, [pc, #296]	; (8000680 <GPIO_Init+0x2f0>)
 8000556:	430b      	orrs	r3, r1
 8000558:	6013      	str	r3, [r2, #0]

	}

	/* 2 speed */
	temp = (pGPIOHandle->Config.Speed << (2 * pGPIOHandle->Config.PinNumber));
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	7a5b      	ldrb	r3, [r3, #9]
 800055e:	461a      	mov	r2, r3
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	791b      	ldrb	r3, [r3, #4]
 8000564:	005b      	lsls	r3, r3, #1
 8000566:	fa02 f303 	lsl.w	r3, r2, r3
 800056a:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= (0b11 << pGPIOHandle->Config.PinNumber);
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	689a      	ldr	r2, [r3, #8]
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	791b      	ldrb	r3, [r3, #4]
 8000576:	4619      	mov	r1, r3
 8000578:	2303      	movs	r3, #3
 800057a:	408b      	lsls	r3, r1
 800057c:	4619      	mov	r1, r3
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	400a      	ands	r2, r1
 8000584:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	6899      	ldr	r1, [r3, #8]
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	697a      	ldr	r2, [r7, #20]
 8000592:	430a      	orrs	r2, r1
 8000594:	609a      	str	r2, [r3, #8]

	/* 3 pupd */
	temp = (pGPIOHandle->Config.PuPdControl << (2 * pGPIOHandle->Config.PinNumber));
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	799b      	ldrb	r3, [r3, #6]
 800059a:	461a      	mov	r2, r3
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	791b      	ldrb	r3, [r3, #4]
 80005a0:	005b      	lsls	r3, r3, #1
 80005a2:	fa02 f303 	lsl.w	r3, r2, r3
 80005a6:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= (0b11 << pGPIOHandle->Config.PinNumber);
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	68da      	ldr	r2, [r3, #12]
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	791b      	ldrb	r3, [r3, #4]
 80005b2:	4619      	mov	r1, r3
 80005b4:	2303      	movs	r3, #3
 80005b6:	408b      	lsls	r3, r1
 80005b8:	4619      	mov	r1, r3
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	400a      	ands	r2, r1
 80005c0:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	68d9      	ldr	r1, [r3, #12]
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	697a      	ldr	r2, [r7, #20]
 80005ce:	430a      	orrs	r2, r1
 80005d0:	60da      	str	r2, [r3, #12]

	/* 4 optype */
	temp = (pGPIOHandle->Config.OpType << (pGPIOHandle->Config.PinNumber));
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	79db      	ldrb	r3, [r3, #7]
 80005d6:	461a      	mov	r2, r3
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	791b      	ldrb	r3, [r3, #4]
 80005dc:	fa02 f303 	lsl.w	r3, r2, r3
 80005e0:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= (0b1 << pGPIOHandle->Config.PinNumber);
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	685a      	ldr	r2, [r3, #4]
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	791b      	ldrb	r3, [r3, #4]
 80005ec:	4619      	mov	r1, r3
 80005ee:	2301      	movs	r3, #1
 80005f0:	408b      	lsls	r3, r1
 80005f2:	4619      	mov	r1, r3
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	400a      	ands	r2, r1
 80005fa:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	6859      	ldr	r1, [r3, #4]
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	697a      	ldr	r2, [r7, #20]
 8000608:	430a      	orrs	r2, r1
 800060a:	605a      	str	r2, [r3, #4]


	/* 5 alt functionality */
	if(pGPIOHandle->Config.Mode == GPIO_MODE_ALTFN) {
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	795b      	ldrb	r3, [r3, #5]
 8000610:	2b02      	cmp	r3, #2
 8000612:	d130      	bne.n	8000676 <GPIO_Init+0x2e6>

		uint8_t AFRRegIndex = pGPIOHandle->Config.PinNumber / 8;
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	791b      	ldrb	r3, [r3, #4]
 8000618:	08db      	lsrs	r3, r3, #3
 800061a:	73fb      	strb	r3, [r7, #15]
		uint8_t AFRBits = pGPIOHandle->Config.PinNumber % 8;
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	791b      	ldrb	r3, [r3, #4]
 8000620:	f003 0307 	and.w	r3, r3, #7
 8000624:	73bb      	strb	r3, [r7, #14]

		/* clear register first, else anything left over will be ORed */
		pGPIOHandle->pGPIOx->AFR[AFRRegIndex] &= ~(0b1111 << AFRBits);
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	7bfa      	ldrb	r2, [r7, #15]
 800062c:	3208      	adds	r2, #8
 800062e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000632:	7bbb      	ldrb	r3, [r7, #14]
 8000634:	220f      	movs	r2, #15
 8000636:	fa02 f303 	lsl.w	r3, r2, r3
 800063a:	43db      	mvns	r3, r3
 800063c:	4618      	mov	r0, r3
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	7bfa      	ldrb	r2, [r7, #15]
 8000644:	4001      	ands	r1, r0
 8000646:	3208      	adds	r2, #8
 8000648:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[AFRRegIndex] |= (pGPIOHandle->Config.AFMode << (4 * AFRBits));
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	7bfa      	ldrb	r2, [r7, #15]
 8000652:	3208      	adds	r2, #8
 8000654:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	7a1b      	ldrb	r3, [r3, #8]
 800065c:	461a      	mov	r2, r3
 800065e:	7bbb      	ldrb	r3, [r7, #14]
 8000660:	009b      	lsls	r3, r3, #2
 8000662:	fa02 f303 	lsl.w	r3, r2, r3
 8000666:	4618      	mov	r0, r3
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	7bfa      	ldrb	r2, [r7, #15]
 800066e:	4301      	orrs	r1, r0
 8000670:	3208      	adds	r2, #8
 8000672:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	}

}
 8000676:	bf00      	nop
 8000678:	3718      	adds	r7, #24
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	40013c00 	.word	0x40013c00
 8000684:	40020000 	.word	0x40020000
 8000688:	40020400 	.word	0x40020400
 800068c:	40020800 	.word	0x40020800
 8000690:	40020c00 	.word	0x40020c00
 8000694:	40021000 	.word	0x40021000
 8000698:	40021400 	.word	0x40021400
 800069c:	40021800 	.word	0x40021800
 80006a0:	40021c00 	.word	0x40021c00
 80006a4:	40013800 	.word	0x40013800

080006a8 <GPIO_ReadInputPin>:
	}

}


uint8_t GPIO_ReadInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber) {
 80006a8:	b480      	push	{r7}
 80006aa:	b083      	sub	sp, #12
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
 80006b0:	460b      	mov	r3, r1
 80006b2:	70fb      	strb	r3, [r7, #3]

	return (uint8_t) ((pGPIOx->IDR >> PinNumber) & (0x00000001));
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	691a      	ldr	r2, [r3, #16]
 80006b8:	78fb      	ldrb	r3, [r7, #3]
 80006ba:	fa22 f303 	lsr.w	r3, r2, r3
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	f003 0301 	and.w	r3, r3, #1
 80006c4:	b2db      	uxtb	r3, r3

}
 80006c6:	4618      	mov	r0, r3
 80006c8:	370c      	adds	r7, #12
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr
	...

080006d4 <SPI_PeriphClkControl>:
 */

#include "stm32f446xx_spi.h"


void SPI_PeriphClkControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi) {
 80006d4:	b480      	push	{r7}
 80006d6:	b083      	sub	sp, #12
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
 80006dc:	460b      	mov	r3, r1
 80006de:	70fb      	strb	r3, [r7, #3]

	if(pSPIx == SPI1) {
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	4a2c      	ldr	r2, [pc, #176]	; (8000794 <SPI_PeriphClkControl+0xc0>)
 80006e4:	4293      	cmp	r3, r2
 80006e6:	d110      	bne.n	800070a <SPI_PeriphClkControl+0x36>

		if(EnOrDi) SPI1_CLK_EN();
 80006e8:	78fb      	ldrb	r3, [r7, #3]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d006      	beq.n	80006fc <SPI_PeriphClkControl+0x28>
 80006ee:	4b2a      	ldr	r3, [pc, #168]	; (8000798 <SPI_PeriphClkControl+0xc4>)
 80006f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006f2:	4a29      	ldr	r2, [pc, #164]	; (8000798 <SPI_PeriphClkControl+0xc4>)
 80006f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80006f8:	6453      	str	r3, [r2, #68]	; 0x44
		if(EnOrDi) SPI4_CLK_EN();
		else SPI4_CLK_DI();

	}

}
 80006fa:	e044      	b.n	8000786 <SPI_PeriphClkControl+0xb2>
		else SPI1_CLK_DI();
 80006fc:	4b26      	ldr	r3, [pc, #152]	; (8000798 <SPI_PeriphClkControl+0xc4>)
 80006fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000700:	4a25      	ldr	r2, [pc, #148]	; (8000798 <SPI_PeriphClkControl+0xc4>)
 8000702:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000706:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000708:	e03d      	b.n	8000786 <SPI_PeriphClkControl+0xb2>
	else if(pSPIx == SPI2) {
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	4a23      	ldr	r2, [pc, #140]	; (800079c <SPI_PeriphClkControl+0xc8>)
 800070e:	4293      	cmp	r3, r2
 8000710:	d110      	bne.n	8000734 <SPI_PeriphClkControl+0x60>
		if(EnOrDi) SPI2_CLK_EN();
 8000712:	78fb      	ldrb	r3, [r7, #3]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d006      	beq.n	8000726 <SPI_PeriphClkControl+0x52>
 8000718:	4b1f      	ldr	r3, [pc, #124]	; (8000798 <SPI_PeriphClkControl+0xc4>)
 800071a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800071c:	4a1e      	ldr	r2, [pc, #120]	; (8000798 <SPI_PeriphClkControl+0xc4>)
 800071e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000722:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000724:	e02f      	b.n	8000786 <SPI_PeriphClkControl+0xb2>
		else SPI2_CLK_DI();
 8000726:	4b1c      	ldr	r3, [pc, #112]	; (8000798 <SPI_PeriphClkControl+0xc4>)
 8000728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800072a:	4a1b      	ldr	r2, [pc, #108]	; (8000798 <SPI_PeriphClkControl+0xc4>)
 800072c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000730:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000732:	e028      	b.n	8000786 <SPI_PeriphClkControl+0xb2>
	else if(pSPIx == SPI3) {
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	4a1a      	ldr	r2, [pc, #104]	; (80007a0 <SPI_PeriphClkControl+0xcc>)
 8000738:	4293      	cmp	r3, r2
 800073a:	d110      	bne.n	800075e <SPI_PeriphClkControl+0x8a>
		if(EnOrDi) SPI3_CLK_EN();
 800073c:	78fb      	ldrb	r3, [r7, #3]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d006      	beq.n	8000750 <SPI_PeriphClkControl+0x7c>
 8000742:	4b15      	ldr	r3, [pc, #84]	; (8000798 <SPI_PeriphClkControl+0xc4>)
 8000744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000746:	4a14      	ldr	r2, [pc, #80]	; (8000798 <SPI_PeriphClkControl+0xc4>)
 8000748:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800074c:	6413      	str	r3, [r2, #64]	; 0x40
}
 800074e:	e01a      	b.n	8000786 <SPI_PeriphClkControl+0xb2>
		else SPI3_CLK_DI();
 8000750:	4b11      	ldr	r3, [pc, #68]	; (8000798 <SPI_PeriphClkControl+0xc4>)
 8000752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000754:	4a10      	ldr	r2, [pc, #64]	; (8000798 <SPI_PeriphClkControl+0xc4>)
 8000756:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800075a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800075c:	e013      	b.n	8000786 <SPI_PeriphClkControl+0xb2>
	else if(pSPIx == SPI4) {
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	4a10      	ldr	r2, [pc, #64]	; (80007a4 <SPI_PeriphClkControl+0xd0>)
 8000762:	4293      	cmp	r3, r2
 8000764:	d10f      	bne.n	8000786 <SPI_PeriphClkControl+0xb2>
		if(EnOrDi) SPI4_CLK_EN();
 8000766:	78fb      	ldrb	r3, [r7, #3]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d006      	beq.n	800077a <SPI_PeriphClkControl+0xa6>
 800076c:	4b0a      	ldr	r3, [pc, #40]	; (8000798 <SPI_PeriphClkControl+0xc4>)
 800076e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000770:	4a09      	ldr	r2, [pc, #36]	; (8000798 <SPI_PeriphClkControl+0xc4>)
 8000772:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000776:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000778:	e005      	b.n	8000786 <SPI_PeriphClkControl+0xb2>
		else SPI4_CLK_DI();
 800077a:	4b07      	ldr	r3, [pc, #28]	; (8000798 <SPI_PeriphClkControl+0xc4>)
 800077c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800077e:	4a06      	ldr	r2, [pc, #24]	; (8000798 <SPI_PeriphClkControl+0xc4>)
 8000780:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000784:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000786:	bf00      	nop
 8000788:	370c      	adds	r7, #12
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	40013000 	.word	0x40013000
 8000798:	40023800 	.word	0x40023800
 800079c:	40003800 	.word	0x40003800
 80007a0:	40003c00 	.word	0x40003c00
 80007a4:	40013400 	.word	0x40013400

080007a8 <SPI_PeriphControl>:


void SPI_PeriphControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi) {
 80007a8:	b480      	push	{r7}
 80007aa:	b083      	sub	sp, #12
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
 80007b0:	460b      	mov	r3, r1
 80007b2:	70fb      	strb	r3, [r7, #3]

	if(EnOrDi) {
 80007b4:	78fb      	ldrb	r3, [r7, #3]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d006      	beq.n	80007c8 <SPI_PeriphControl+0x20>

		pSPIx->CR1 |= (1 << SPI_CR1_ENABLE_BITSHIFT);
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	601a      	str	r2, [r3, #0]
	else {

		pSPIx->CR1 &= ~(1 << SPI_CR1_ENABLE_BITSHIFT);
	}

}
 80007c6:	e005      	b.n	80007d4 <SPI_PeriphControl+0x2c>
		pSPIx->CR1 &= ~(1 << SPI_CR1_ENABLE_BITSHIFT);
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	601a      	str	r2, [r3, #0]
}
 80007d4:	bf00      	nop
 80007d6:	370c      	adds	r7, #12
 80007d8:	46bd      	mov	sp, r7
 80007da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007de:	4770      	bx	lr

080007e0 <SPI_Init>:

void SPI_Init(SPI_Handle_t *pSPIHandle) {
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b084      	sub	sp, #16
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]

	SPI_PeriphClkControl(pSPIHandle->pSPIx, ENABLE);
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	2101      	movs	r1, #1
 80007ee:	4618      	mov	r0, r3
 80007f0:	f7ff ff70 	bl	80006d4 <SPI_PeriphClkControl>

	uint32_t tempReg = 0;
 80007f4:	2300      	movs	r3, #0
 80007f6:	60fb      	str	r3, [r7, #12]

	tempReg |= pSPIHandle->SPIConfig.DeviceMode << SPI_CR1_MSTR_BITSHIFT;
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	791b      	ldrb	r3, [r3, #4]
 80007fc:	009b      	lsls	r3, r3, #2
 80007fe:	461a      	mov	r2, r3
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	4313      	orrs	r3, r2
 8000804:	60fb      	str	r3, [r7, #12]


	if(pSPIHandle->SPIConfig.BusConfig == SPI_BUS_CONF_FD) {
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	795b      	ldrb	r3, [r3, #5]
 800080a:	2b01      	cmp	r3, #1
 800080c:	d104      	bne.n	8000818 <SPI_Init+0x38>

		tempReg &= ~(1 << SPI_CR1_BIDIMODE_BITSHIFT);
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000814:	60fb      	str	r3, [r7, #12]
 8000816:	e014      	b.n	8000842 <SPI_Init+0x62>

	}
	else if(pSPIHandle->SPIConfig.BusConfig == SPI_BUS_CONF_HD) {
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	795b      	ldrb	r3, [r3, #5]
 800081c:	2b02      	cmp	r3, #2
 800081e:	d104      	bne.n	800082a <SPI_Init+0x4a>

		tempReg |= (1 << SPI_CR1_BIDIMODE_BITSHIFT);
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000826:	60fb      	str	r3, [r7, #12]
 8000828:	e00b      	b.n	8000842 <SPI_Init+0x62>

	}
	else if(pSPIHandle->SPIConfig.BusConfig == SPI_BUS_CONF_SMPLX_RX) {
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	795b      	ldrb	r3, [r3, #5]
 800082e:	2b04      	cmp	r3, #4
 8000830:	d107      	bne.n	8000842 <SPI_Init+0x62>

		tempReg &= ~(1 << SPI_CR1_BIDIMODE_BITSHIFT);
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000838:	60fb      	str	r3, [r7, #12]
		tempReg |= (1 << SPI_CR1_RX_ONLY_BITSHIFT);
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000840:	60fb      	str	r3, [r7, #12]

	}

	tempReg |= pSPIHandle->SPIConfig.SCLKSpeed << SPI_CR1_BR_BITSHIFT;
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	799b      	ldrb	r3, [r3, #6]
 8000846:	00db      	lsls	r3, r3, #3
 8000848:	461a      	mov	r2, r3
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	4313      	orrs	r3, r2
 800084e:	60fb      	str	r3, [r7, #12]
	tempReg |= pSPIHandle->SPIConfig.DFF << SPI_CR1_DFF_BITSHIFT;
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	79db      	ldrb	r3, [r3, #7]
 8000854:	02db      	lsls	r3, r3, #11
 8000856:	461a      	mov	r2, r3
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	4313      	orrs	r3, r2
 800085c:	60fb      	str	r3, [r7, #12]
	tempReg |= pSPIHandle->SPIConfig.CPOL << SPI_CR1_CPOL_BITSHIFT;
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	7a1b      	ldrb	r3, [r3, #8]
 8000862:	005b      	lsls	r3, r3, #1
 8000864:	461a      	mov	r2, r3
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	4313      	orrs	r3, r2
 800086a:	60fb      	str	r3, [r7, #12]
	tempReg |= pSPIHandle->SPIConfig.CPHA << SPI_CR1_CPHA_BITSHIFT;
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	7a5b      	ldrb	r3, [r3, #9]
 8000870:	461a      	mov	r2, r3
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	4313      	orrs	r3, r2
 8000876:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 = tempReg;
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	68fa      	ldr	r2, [r7, #12]
 800087e:	601a      	str	r2, [r3, #0]


}
 8000880:	bf00      	nop
 8000882:	3710      	adds	r7, #16
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}

08000888 <SPI_GetFlagStatus>:
	pSPIx->CR1 = (uint32_t) RESET;
	pSPIx->CR2 = (uint32_t) RESET;

}

uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint16_t flagName) {
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
 8000890:	460b      	mov	r3, r1
 8000892:	807b      	strh	r3, [r7, #2]

	return (uint8_t) (pSPIx->SR & flagName);
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	689b      	ldr	r3, [r3, #8]
 8000898:	b2da      	uxtb	r2, r3
 800089a:	887b      	ldrh	r3, [r7, #2]
 800089c:	b2db      	uxtb	r3, r3
 800089e:	4013      	ands	r3, r2
 80008a0:	b2db      	uxtb	r3, r3

}
 80008a2:	4618      	mov	r0, r3
 80008a4:	370c      	adds	r7, #12
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr

080008ae <SPI_Tx>:


void SPI_Tx(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t len) {
 80008ae:	b580      	push	{r7, lr}
 80008b0:	b084      	sub	sp, #16
 80008b2:	af00      	add	r7, sp, #0
 80008b4:	60f8      	str	r0, [r7, #12]
 80008b6:	60b9      	str	r1, [r7, #8]
 80008b8:	607a      	str	r2, [r7, #4]

	while(len > 0) {
 80008ba:	e027      	b.n	800090c <SPI_Tx+0x5e>

		// wait until TXE is set
		while(SPI_GetFlagStatus(pSPIx, SPI_TXE_FLAG) == FLAG_SET);
 80008bc:	bf00      	nop
 80008be:	2102      	movs	r1, #2
 80008c0:	68f8      	ldr	r0, [r7, #12]
 80008c2:	f7ff ffe1 	bl	8000888 <SPI_GetFlagStatus>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b01      	cmp	r3, #1
 80008ca:	d0f8      	beq.n	80008be <SPI_Tx+0x10>

		// test if 16 bit dff
		if(pSPIx->CR1 & (1 << SPI_CR1_DFF_BITSHIFT)) {
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d00e      	beq.n	80008f6 <SPI_Tx+0x48>

			// load data into data register
			pSPIx->DR = *(uint16_t*)pTxBuffer;
 80008d8:	68bb      	ldr	r3, [r7, #8]
 80008da:	881b      	ldrh	r3, [r3, #0]
 80008dc:	461a      	mov	r2, r3
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	60da      	str	r2, [r3, #12]

			// decrease by len of 2 because 2 bytes
			len--;
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	3b01      	subs	r3, #1
 80008e6:	607b      	str	r3, [r7, #4]
			len--;
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	3b01      	subs	r3, #1
 80008ec:	607b      	str	r3, [r7, #4]

			(uint16_t*)pTxBuffer++;
 80008ee:	68bb      	ldr	r3, [r7, #8]
 80008f0:	3301      	adds	r3, #1
 80008f2:	60bb      	str	r3, [r7, #8]
 80008f4:	e00a      	b.n	800090c <SPI_Tx+0x5e>

		}
		else {

			// 8 bit dff
			pSPIx->DR = *(uint8_t*)pTxBuffer;
 80008f6:	68bb      	ldr	r3, [r7, #8]
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	461a      	mov	r2, r3
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	60da      	str	r2, [r3, #12]

			// decrease by len of 1 because single byte
			len--;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	3b01      	subs	r3, #1
 8000904:	607b      	str	r3, [r7, #4]

			pTxBuffer++;
 8000906:	68bb      	ldr	r3, [r7, #8]
 8000908:	3301      	adds	r3, #1
 800090a:	60bb      	str	r3, [r7, #8]
	while(len > 0) {
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	2b00      	cmp	r3, #0
 8000910:	d1d4      	bne.n	80008bc <SPI_Tx+0xe>

		}

	}

}
 8000912:	bf00      	nop
 8000914:	bf00      	nop
 8000916:	3710      	adds	r7, #16
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}

0800091c <SPI_Rx>:


void SPI_Rx(SPI_RegDef_t *pSPIx, uint8_t *pRxBuffer, uint32_t len) {
 800091c:	b580      	push	{r7, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	af00      	add	r7, sp, #0
 8000922:	60f8      	str	r0, [r7, #12]
 8000924:	60b9      	str	r1, [r7, #8]
 8000926:	607a      	str	r2, [r7, #4]

	while(len > 0) {
 8000928:	e027      	b.n	800097a <SPI_Rx+0x5e>

		// wait until RXE is set
		while(SPI_GetFlagStatus(pSPIx, SPI_RXNE_FLAG) == FLAG_SET);
 800092a:	bf00      	nop
 800092c:	2101      	movs	r1, #1
 800092e:	68f8      	ldr	r0, [r7, #12]
 8000930:	f7ff ffaa 	bl	8000888 <SPI_GetFlagStatus>
 8000934:	4603      	mov	r3, r0
 8000936:	2b01      	cmp	r3, #1
 8000938:	d0f8      	beq.n	800092c <SPI_Rx+0x10>

		// test if 16 bit dff
		if(pSPIx->CR1 & (1 << SPI_CR1_DFF_BITSHIFT)) {
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000942:	2b00      	cmp	r3, #0
 8000944:	d00e      	beq.n	8000964 <SPI_Rx+0x48>

			// load data into data register
			*(uint16_t*)pRxBuffer = pSPIx->DR;
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	68db      	ldr	r3, [r3, #12]
 800094a:	b29a      	uxth	r2, r3
 800094c:	68bb      	ldr	r3, [r7, #8]
 800094e:	801a      	strh	r2, [r3, #0]

			// decrease by len of 2 because 2 bytes
			len--;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	3b01      	subs	r3, #1
 8000954:	607b      	str	r3, [r7, #4]
			len--;
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	3b01      	subs	r3, #1
 800095a:	607b      	str	r3, [r7, #4]

			(uint16_t*)pRxBuffer++;
 800095c:	68bb      	ldr	r3, [r7, #8]
 800095e:	3301      	adds	r3, #1
 8000960:	60bb      	str	r3, [r7, #8]
 8000962:	e00a      	b.n	800097a <SPI_Rx+0x5e>

		}
		else {

			// 8 bit dff
			*(uint8_t*)pRxBuffer = pSPIx->DR;
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	68db      	ldr	r3, [r3, #12]
 8000968:	b2da      	uxtb	r2, r3
 800096a:	68bb      	ldr	r3, [r7, #8]
 800096c:	701a      	strb	r2, [r3, #0]

			// decrease by len of 1 because single byte
			len--;
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	3b01      	subs	r3, #1
 8000972:	607b      	str	r3, [r7, #4]

			pRxBuffer++;
 8000974:	68bb      	ldr	r3, [r7, #8]
 8000976:	3301      	adds	r3, #1
 8000978:	60bb      	str	r3, [r7, #8]
	while(len > 0) {
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d1d4      	bne.n	800092a <SPI_Rx+0xe>

		}

	}
}
 8000980:	bf00      	nop
 8000982:	bf00      	nop
 8000984:	3710      	adds	r7, #16
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}

0800098a <SPI_SSIConfig>:

// weak implementation, application may override
__attribute__((weak)) void SPI_ApplicationEventCallback(SPI_Handle_t *pSPIxHandle, uint8_t appEvent);


void SPI_SSIConfig(SPI_RegDef_t *pSPIx, uint8_t EnOrDi) {
 800098a:	b480      	push	{r7}
 800098c:	b083      	sub	sp, #12
 800098e:	af00      	add	r7, sp, #0
 8000990:	6078      	str	r0, [r7, #4]
 8000992:	460b      	mov	r3, r1
 8000994:	70fb      	strb	r3, [r7, #3]

	if(EnOrDi) {
 8000996:	78fb      	ldrb	r3, [r7, #3]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d006      	beq.n	80009aa <SPI_SSIConfig+0x20>

		pSPIx->CR1 |= (1 << SPI_CR1_SSI_BITSHIFT);
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	601a      	str	r2, [r3, #0]
	else {

		pSPIx->CR1 &= ~(1 << SPI_CR1_SSI_BITSHIFT);

	}
}
 80009a8:	e005      	b.n	80009b6 <SPI_SSIConfig+0x2c>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SSI_BITSHIFT);
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	601a      	str	r2, [r3, #0]
}
 80009b6:	bf00      	nop
 80009b8:	370c      	adds	r7, #12
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr

080009c2 <SPI_SSOEConfig>:


void SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnOrDi) {
 80009c2:	b480      	push	{r7}
 80009c4:	b083      	sub	sp, #12
 80009c6:	af00      	add	r7, sp, #0
 80009c8:	6078      	str	r0, [r7, #4]
 80009ca:	460b      	mov	r3, r1
 80009cc:	70fb      	strb	r3, [r7, #3]

	if(EnOrDi) {
 80009ce:	78fb      	ldrb	r3, [r7, #3]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d006      	beq.n	80009e2 <SPI_SSOEConfig+0x20>

		pSPIx->CR2 |= (1 << SPI_CR2_SSOE_BITSHIFT);
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	685b      	ldr	r3, [r3, #4]
 80009d8:	f043 0204 	orr.w	r2, r3, #4
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	605a      	str	r2, [r3, #4]
	else {

		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE_BITSHIFT);

	}
}
 80009e0:	e005      	b.n	80009ee <SPI_SSOEConfig+0x2c>
		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE_BITSHIFT);
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	685b      	ldr	r3, [r3, #4]
 80009e6:	f023 0204 	bic.w	r2, r3, #4
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	605a      	str	r2, [r3, #4]
}
 80009ee:	bf00      	nop
 80009f0:	370c      	adds	r7, #12
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr

080009fa <delay>:
#define ANALOG_PIN4			4

#define LED_PIN				9


void delay(void) {
 80009fa:	b480      	push	{r7}
 80009fc:	b083      	sub	sp, #12
 80009fe:	af00      	add	r7, sp, #0

	for(uint32_t i = 0; i < 50000/2; i++);
 8000a00:	2300      	movs	r3, #0
 8000a02:	607b      	str	r3, [r7, #4]
 8000a04:	e002      	b.n	8000a0c <delay+0x12>
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	3301      	adds	r3, #1
 8000a0a:	607b      	str	r3, [r7, #4]
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	f246 12a7 	movw	r2, #24999	; 0x61a7
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d9f7      	bls.n	8000a06 <delay+0xc>

}
 8000a16:	bf00      	nop
 8000a18:	bf00      	nop
 8000a1a:	370c      	adds	r7, #12
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr

08000a24 <SPI_VerifyResponse>:


uint8_t SPI_VerifyResponse(uint8_t response) {
 8000a24:	b480      	push	{r7}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	71fb      	strb	r3, [r7, #7]

	return response == 0xF5;
 8000a2e:	79fb      	ldrb	r3, [r7, #7]
 8000a30:	2bf5      	cmp	r3, #245	; 0xf5
 8000a32:	bf0c      	ite	eq
 8000a34:	2301      	moveq	r3, #1
 8000a36:	2300      	movne	r3, #0
 8000a38:	b2db      	uxtb	r3, r3
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	370c      	adds	r7, #12
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
	...

08000a48 <GPIO_ButtonInits>:

void GPIO_ButtonInits(void) {
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b084      	sub	sp, #16
 8000a4c:	af00      	add	r7, sp, #0

	GPIO_Handle_t GpioButton;
	GpioButton.pGPIOx = GPIOC;
 8000a4e:	4b09      	ldr	r3, [pc, #36]	; (8000a74 <GPIO_ButtonInits+0x2c>)
 8000a50:	607b      	str	r3, [r7, #4]
	GpioButton.Config.PinNumber = GPIO_PIN13;
 8000a52:	230d      	movs	r3, #13
 8000a54:	723b      	strb	r3, [r7, #8]
	GpioButton.Config.Mode = GPIO_MODE_IN;
 8000a56:	2300      	movs	r3, #0
 8000a58:	727b      	strb	r3, [r7, #9]
	GpioButton.Config.OpType = GPIO_OTYPE_PP;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	72fb      	strb	r3, [r7, #11]
	GpioButton.Config.PuPdControl = GPIO_NO_PUPD;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	72bb      	strb	r3, [r7, #10]

	GPIO_Init(&GpioButton);
 8000a62:	1d3b      	adds	r3, r7, #4
 8000a64:	4618      	mov	r0, r3
 8000a66:	f7ff fc93 	bl	8000390 <GPIO_Init>

}
 8000a6a:	bf00      	nop
 8000a6c:	3710      	adds	r7, #16
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	40020800 	.word	0x40020800

08000a78 <SPI1_GPIOInits>:

void SPI1_GPIOInits(void) {
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b084      	sub	sp, #16
 8000a7c:	af00      	add	r7, sp, #0

	GPIO_Handle_t SPIPins;
	SPIPins.pGPIOx = GPIOA;
 8000a7e:	4b11      	ldr	r3, [pc, #68]	; (8000ac4 <SPI1_GPIOInits+0x4c>)
 8000a80:	607b      	str	r3, [r7, #4]
	SPIPins.Config.Mode = GPIO_MODE_ALTFN;
 8000a82:	2302      	movs	r3, #2
 8000a84:	727b      	strb	r3, [r7, #9]
	SPIPins.Config.AFMode = 5;
 8000a86:	2305      	movs	r3, #5
 8000a88:	733b      	strb	r3, [r7, #12]
	SPIPins.Config.OpType = GPIO_OTYPE_PP;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	72fb      	strb	r3, [r7, #11]
	SPIPins.Config.PuPdControl = GPIO_NO_PUPD;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	72bb      	strb	r3, [r7, #10]
	SPIPins.Config.Speed = GPIO_OSPEED_HIGH;
 8000a92:	2302      	movs	r3, #2
 8000a94:	737b      	strb	r3, [r7, #13]

	// SCLK
	SPIPins.Config.PinNumber = GPIO_PIN5;
 8000a96:	2305      	movs	r3, #5
 8000a98:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000a9a:	1d3b      	adds	r3, r7, #4
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f7ff fc77 	bl	8000390 <GPIO_Init>

	// MOSI
	SPIPins.Config.PinNumber = GPIO_PIN7;
 8000aa2:	2307      	movs	r3, #7
 8000aa4:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000aa6:	1d3b      	adds	r3, r7, #4
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f7ff fc71 	bl	8000390 <GPIO_Init>

	// MISO
	SPIPins.Config.PinNumber = GPIO_PIN6;
 8000aae:	2306      	movs	r3, #6
 8000ab0:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000ab2:	1d3b      	adds	r3, r7, #4
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f7ff fc6b 	bl	8000390 <GPIO_Init>
	// NSS
	// SPIPins.pGPIOx = GPIOB;
	// SPIPins.Config.PinNumber = GPIO_PIN6;
	// GPIO_INIT(&SPIPins);

}
 8000aba:	bf00      	nop
 8000abc:	3710      	adds	r7, #16
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	40020000 	.word	0x40020000

08000ac8 <SPI1_Inits>:


void SPI1_Inits(void) {
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b088      	sub	sp, #32
 8000acc:	af00      	add	r7, sp, #0

	SPI_Handle_t SPI1Handle;
	SPI1Handle.pSPIx = SPI2;
 8000ace:	4b0c      	ldr	r3, [pc, #48]	; (8000b00 <SPI1_Inits+0x38>)
 8000ad0:	603b      	str	r3, [r7, #0]
	SPI1Handle.SPIConfig.BusConfig = SPI_BUS_CONF_FD;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	717b      	strb	r3, [r7, #5]
	SPI1Handle.SPIConfig.DeviceMode = SPI_MODE_MASTER;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	713b      	strb	r3, [r7, #4]
	SPI1Handle.SPIConfig.SCLKSpeed = SPI_SCLK_SPEED_DIV2;
 8000ada:	2300      	movs	r3, #0
 8000adc:	71bb      	strb	r3, [r7, #6]
	SPI1Handle.SPIConfig.DFF = SPI_DFF_8BIT;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	71fb      	strb	r3, [r7, #7]
	SPI1Handle.SPIConfig.CPHA = SPI_CPHA_LOW;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	727b      	strb	r3, [r7, #9]
	SPI1Handle.SPIConfig.CPOL = SPI_CPOL_LOW;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	723b      	strb	r3, [r7, #8]
	SPI1Handle.SPIConfig.SSM = SPI_SSM_EN;
 8000aea:	2301      	movs	r3, #1
 8000aec:	72bb      	strb	r3, [r7, #10]

	SPI_Init(&SPI1Handle);
 8000aee:	463b      	mov	r3, r7
 8000af0:	4618      	mov	r0, r3
 8000af2:	f7ff fe75 	bl	80007e0 <SPI_Init>

}
 8000af6:	bf00      	nop
 8000af8:	3720      	adds	r7, #32
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	40003800 	.word	0x40003800

08000b04 <main>:



int main(void) {
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0

	GPIO_ButtonInits();
 8000b0a:	f7ff ff9d 	bl	8000a48 <GPIO_ButtonInits>
	SPI1_GPIOInits();
 8000b0e:	f7ff ffb3 	bl	8000a78 <SPI1_GPIOInits>
	SPI1_Inits();
 8000b12:	f7ff ffd9 	bl	8000ac8 <SPI1_Inits>

	/* automatically pull NSS low */
	SPI_SSOEConfig(SPI1, ENABLE);
 8000b16:	2101      	movs	r1, #1
 8000b18:	4852      	ldr	r0, [pc, #328]	; (8000c64 <main+0x160>)
 8000b1a:	f7ff ff52 	bl	80009c2 <SPI_SSOEConfig>
	SPI_SSIConfig(SPI1, ENABLE);
 8000b1e:	2101      	movs	r1, #1
 8000b20:	4850      	ldr	r0, [pc, #320]	; (8000c64 <main+0x160>)
 8000b22:	f7ff ff32 	bl	800098a <SPI_SSIConfig>

	while(1) {

		/* upon button press, debounce, and send message via SPI */
		while(!GPIO_ReadInputPin(GPIOA, GPIO_PIN0));
 8000b26:	bf00      	nop
 8000b28:	2100      	movs	r1, #0
 8000b2a:	484f      	ldr	r0, [pc, #316]	; (8000c68 <main+0x164>)
 8000b2c:	f7ff fdbc 	bl	80006a8 <GPIO_ReadInputPin>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d0f8      	beq.n	8000b28 <main+0x24>
		delay();
 8000b36:	f7ff ff60 	bl	80009fa <delay>
		SPI_PeriphControl(SPI1, ENABLE);
 8000b3a:	2101      	movs	r1, #1
 8000b3c:	4849      	ldr	r0, [pc, #292]	; (8000c64 <main+0x160>)
 8000b3e:	f7ff fe33 	bl	80007a8 <SPI_PeriphControl>

		// 1. command led control
		uint8_t dummyData = 0xFF;
 8000b42:	23ff      	movs	r3, #255	; 0xff
 8000b44:	73fb      	strb	r3, [r7, #15]
		uint8_t commandCode = CMD_LED_CTRL;
 8000b46:	2350      	movs	r3, #80	; 0x50
 8000b48:	73bb      	strb	r3, [r7, #14]
		SPI_Tx(SPI1, &commandCode, sizeof(commandCode));
 8000b4a:	f107 030e 	add.w	r3, r7, #14
 8000b4e:	2201      	movs	r2, #1
 8000b50:	4619      	mov	r1, r3
 8000b52:	4844      	ldr	r0, [pc, #272]	; (8000c64 <main+0x160>)
 8000b54:	f7ff feab 	bl	80008ae <SPI_Tx>
		SPI_Rx(SPI1, &dummyData, sizeof(dummyData));
 8000b58:	f107 030f 	add.w	r3, r7, #15
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4840      	ldr	r0, [pc, #256]	; (8000c64 <main+0x160>)
 8000b62:	f7ff fedb 	bl	800091c <SPI_Rx>

		// 2. receive ACK
		uint8_t ackByte = 0;
 8000b66:	2300      	movs	r3, #0
 8000b68:	737b      	strb	r3, [r7, #13]
		SPI_Tx(SPI1, &dummyData, sizeof(dummyData));
 8000b6a:	f107 030f 	add.w	r3, r7, #15
 8000b6e:	2201      	movs	r2, #1
 8000b70:	4619      	mov	r1, r3
 8000b72:	483c      	ldr	r0, [pc, #240]	; (8000c64 <main+0x160>)
 8000b74:	f7ff fe9b 	bl	80008ae <SPI_Tx>
		SPI_Rx(SPI1, &ackByte, sizeof(ackByte));
 8000b78:	f107 030d 	add.w	r3, r7, #13
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	4619      	mov	r1, r3
 8000b80:	4838      	ldr	r0, [pc, #224]	; (8000c64 <main+0x160>)
 8000b82:	f7ff fecb 	bl	800091c <SPI_Rx>

		uint8_t args[2];
		if(SPI_VerifyResponse(ackByte)) {
 8000b86:	7b7b      	ldrb	r3, [r7, #13]
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f7ff ff4b 	bl	8000a24 <SPI_VerifyResponse>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d011      	beq.n	8000bb8 <main+0xb4>

			// send arguments
			args[0] = LED_PIN;
 8000b94:	2309      	movs	r3, #9
 8000b96:	723b      	strb	r3, [r7, #8]
			args[1] = LED_ON;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	727b      	strb	r3, [r7, #9]
			SPI_Tx(SPI1, args, sizeof(args));
 8000b9c:	f107 0308 	add.w	r3, r7, #8
 8000ba0:	2202      	movs	r2, #2
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	482f      	ldr	r0, [pc, #188]	; (8000c64 <main+0x160>)
 8000ba6:	f7ff fe82 	bl	80008ae <SPI_Tx>
			SPI_Rx(SPI1, &dummyData, sizeof(dummyData));
 8000baa:	f107 030f 	add.w	r3, r7, #15
 8000bae:	2201      	movs	r2, #1
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	482c      	ldr	r0, [pc, #176]	; (8000c64 <main+0x160>)
 8000bb4:	f7ff feb2 	bl	800091c <SPI_Rx>
		}

		// 2. command sensor read
		while(!GPIO_ReadInputPin(GPIOA, GPIO_PIN0));
 8000bb8:	bf00      	nop
 8000bba:	2100      	movs	r1, #0
 8000bbc:	482a      	ldr	r0, [pc, #168]	; (8000c68 <main+0x164>)
 8000bbe:	f7ff fd73 	bl	80006a8 <GPIO_ReadInputPin>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d0f8      	beq.n	8000bba <main+0xb6>
		delay();
 8000bc8:	f7ff ff17 	bl	80009fa <delay>

		commandCode = CMD_SNSR_READ;
 8000bcc:	2351      	movs	r3, #81	; 0x51
 8000bce:	73bb      	strb	r3, [r7, #14]
		SPI_Tx(SPI1, &commandCode, sizeof(commandCode));
 8000bd0:	f107 030e 	add.w	r3, r7, #14
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4822      	ldr	r0, [pc, #136]	; (8000c64 <main+0x160>)
 8000bda:	f7ff fe68 	bl	80008ae <SPI_Tx>
		SPI_Rx(SPI1, &dummyData, sizeof(dummyData));
 8000bde:	f107 030f 	add.w	r3, r7, #15
 8000be2:	2201      	movs	r2, #1
 8000be4:	4619      	mov	r1, r3
 8000be6:	481f      	ldr	r0, [pc, #124]	; (8000c64 <main+0x160>)
 8000be8:	f7ff fe98 	bl	800091c <SPI_Rx>
		SPI_Tx(SPI1, &dummyData, sizeof(dummyData));
 8000bec:	f107 030f 	add.w	r3, r7, #15
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	481b      	ldr	r0, [pc, #108]	; (8000c64 <main+0x160>)
 8000bf6:	f7ff fe5a 	bl	80008ae <SPI_Tx>
		SPI_Rx(SPI1, &ackByte, sizeof(ackByte));
 8000bfa:	f107 030d 	add.w	r3, r7, #13
 8000bfe:	2201      	movs	r2, #1
 8000c00:	4619      	mov	r1, r3
 8000c02:	4818      	ldr	r0, [pc, #96]	; (8000c64 <main+0x160>)
 8000c04:	f7ff fe8a 	bl	800091c <SPI_Rx>
		if(SPI_VerifyResponse(ackByte)) {
 8000c08:	7b7b      	ldrb	r3, [r7, #13]
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f7ff ff0a 	bl	8000a24 <SPI_VerifyResponse>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d018      	beq.n	8000c48 <main+0x144>

			// send arguments
			args[0] = ANALOG_PIN0;
 8000c16:	2300      	movs	r3, #0
 8000c18:	723b      	strb	r3, [r7, #8]
			SPI_Tx(SPI1, &args[1], sizeof(args[1]));
 8000c1a:	f107 0308 	add.w	r3, r7, #8
 8000c1e:	3301      	adds	r3, #1
 8000c20:	2201      	movs	r2, #1
 8000c22:	4619      	mov	r1, r3
 8000c24:	480f      	ldr	r0, [pc, #60]	; (8000c64 <main+0x160>)
 8000c26:	f7ff fe42 	bl	80008ae <SPI_Tx>

			// wait a bit so that slave has time to prepare response
			delay();
 8000c2a:	f7ff fee6 	bl	80009fa <delay>
			SPI_Rx(SPI1, &dummyData, sizeof(dummyData));
 8000c2e:	f107 030f 	add.w	r3, r7, #15
 8000c32:	2201      	movs	r2, #1
 8000c34:	4619      	mov	r1, r3
 8000c36:	480b      	ldr	r0, [pc, #44]	; (8000c64 <main+0x160>)
 8000c38:	f7ff fe70 	bl	800091c <SPI_Rx>

			uint8_t analogRead;
			SPI_Tx(SPI1, &analogRead, sizeof(analogRead));
 8000c3c:	1dfb      	adds	r3, r7, #7
 8000c3e:	2201      	movs	r2, #1
 8000c40:	4619      	mov	r1, r3
 8000c42:	4808      	ldr	r0, [pc, #32]	; (8000c64 <main+0x160>)
 8000c44:	f7ff fe33 	bl	80008ae <SPI_Tx>




		/* determine TX finished and close SPI */
		while(!SPI_GetFlagStatus(SPI1, SPI_BSY_FLAG));
 8000c48:	bf00      	nop
 8000c4a:	2180      	movs	r1, #128	; 0x80
 8000c4c:	4805      	ldr	r0, [pc, #20]	; (8000c64 <main+0x160>)
 8000c4e:	f7ff fe1b 	bl	8000888 <SPI_GetFlagStatus>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d0f8      	beq.n	8000c4a <main+0x146>
		SPI_PeriphControl(SPI1, DISABLE);
 8000c58:	2100      	movs	r1, #0
 8000c5a:	4802      	ldr	r0, [pc, #8]	; (8000c64 <main+0x160>)
 8000c5c:	f7ff fda4 	bl	80007a8 <SPI_PeriphControl>
	while(1) {
 8000c60:	e761      	b.n	8000b26 <main+0x22>
 8000c62:	bf00      	nop
 8000c64:	40013000 	.word	0x40013000
 8000c68:	40020000 	.word	0x40020000

08000c6c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c6c:	480d      	ldr	r0, [pc, #52]	; (8000ca4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c6e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000c70:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c74:	480c      	ldr	r0, [pc, #48]	; (8000ca8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c76:	490d      	ldr	r1, [pc, #52]	; (8000cac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c78:	4a0d      	ldr	r2, [pc, #52]	; (8000cb0 <LoopForever+0xe>)
  movs r3, #0
 8000c7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c7c:	e002      	b.n	8000c84 <LoopCopyDataInit>

08000c7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c82:	3304      	adds	r3, #4

08000c84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c88:	d3f9      	bcc.n	8000c7e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c8a:	4a0a      	ldr	r2, [pc, #40]	; (8000cb4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c8c:	4c0a      	ldr	r4, [pc, #40]	; (8000cb8 <LoopForever+0x16>)
  movs r3, #0
 8000c8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c90:	e001      	b.n	8000c96 <LoopFillZerobss>

08000c92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c94:	3204      	adds	r2, #4

08000c96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c98:	d3fb      	bcc.n	8000c92 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c9a:	f000 f811 	bl	8000cc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c9e:	f7ff ff31 	bl	8000b04 <main>

08000ca2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ca2:	e7fe      	b.n	8000ca2 <LoopForever>
  ldr   r0, =_estack
 8000ca4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ca8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cac:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000cb0:	08000d28 	.word	0x08000d28
  ldr r2, =_sbss
 8000cb4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000cb8:	2000001c 	.word	0x2000001c

08000cbc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cbc:	e7fe      	b.n	8000cbc <ADC_IRQHandler>
	...

08000cc0 <__libc_init_array>:
 8000cc0:	b570      	push	{r4, r5, r6, lr}
 8000cc2:	4d0d      	ldr	r5, [pc, #52]	; (8000cf8 <__libc_init_array+0x38>)
 8000cc4:	4c0d      	ldr	r4, [pc, #52]	; (8000cfc <__libc_init_array+0x3c>)
 8000cc6:	1b64      	subs	r4, r4, r5
 8000cc8:	10a4      	asrs	r4, r4, #2
 8000cca:	2600      	movs	r6, #0
 8000ccc:	42a6      	cmp	r6, r4
 8000cce:	d109      	bne.n	8000ce4 <__libc_init_array+0x24>
 8000cd0:	4d0b      	ldr	r5, [pc, #44]	; (8000d00 <__libc_init_array+0x40>)
 8000cd2:	4c0c      	ldr	r4, [pc, #48]	; (8000d04 <__libc_init_array+0x44>)
 8000cd4:	f000 f818 	bl	8000d08 <_init>
 8000cd8:	1b64      	subs	r4, r4, r5
 8000cda:	10a4      	asrs	r4, r4, #2
 8000cdc:	2600      	movs	r6, #0
 8000cde:	42a6      	cmp	r6, r4
 8000ce0:	d105      	bne.n	8000cee <__libc_init_array+0x2e>
 8000ce2:	bd70      	pop	{r4, r5, r6, pc}
 8000ce4:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ce8:	4798      	blx	r3
 8000cea:	3601      	adds	r6, #1
 8000cec:	e7ee      	b.n	8000ccc <__libc_init_array+0xc>
 8000cee:	f855 3b04 	ldr.w	r3, [r5], #4
 8000cf2:	4798      	blx	r3
 8000cf4:	3601      	adds	r6, #1
 8000cf6:	e7f2      	b.n	8000cde <__libc_init_array+0x1e>
 8000cf8:	08000d20 	.word	0x08000d20
 8000cfc:	08000d20 	.word	0x08000d20
 8000d00:	08000d20 	.word	0x08000d20
 8000d04:	08000d24 	.word	0x08000d24

08000d08 <_init>:
 8000d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d0a:	bf00      	nop
 8000d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d0e:	bc08      	pop	{r3}
 8000d10:	469e      	mov	lr, r3
 8000d12:	4770      	bx	lr

08000d14 <_fini>:
 8000d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d16:	bf00      	nop
 8000d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d1a:	bc08      	pop	{r3}
 8000d1c:	469e      	mov	lr, r3
 8000d1e:	4770      	bx	lr
